// prisma/schema.prisma
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  summary   String?
  createdAt DateTime  @default(now())
  messages  Message[]
  facts     MemoryFact[]
  title     String?
  conversationState Json?
}

model InfoSource {
  messageId String
  type String
  id String @id @default(cuid())
  title String
  snippet String
  score   Int?
  confidence Int?
  message      Message   @relation(fields: [messageId], references: [id])
  key String?

}
model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String       // 'user' | 'assistant' | 'system'
  content        String
  ts             DateTime     @default(now())
  type           String?
  source         InfoSource[]
  path           String?
  attachments    Json?        // Array of file attachments
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, ts])
}

enum AudioClassification {
  complaint
  compliment
  other
}
enum AudioSentiment{
  negative
  neutral
  positive
}
enum AudioSeverity{
  low
  medium
  high
}

model AudioEntities{
  id             String       @id @default(cuid())
  accountId     String?
  orderId       String?
  product       String?
  audioId       String       @unique
  audio       AudioFile @relation(fields: [audioId], references: [id])
}
model AudioEvidence{
  id             String       @id @default(cuid())
  text  String?
  startMs  String?
  endMs  String?
  audioId       String
  audio       AudioFile @relation(fields: [audioId], references: [id])
}
model FileUpload {
  id             String   @id @default(cuid())
  localPath      String   // Local file path on server
  externalPath   String?  // External URL for accessing the file
  originalName   String   // Original filename from upload
  fileSize       Int      // File size in bytes
  mimeType       String   // MIME type of the file
  isProcessed    Boolean  @default(false)
  conversationId String?  // Optional conversation ID
  messageId      String?  // Optional message ID
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AudioFile {
  id             String       @id @default(cuid())
  path           String
  transcript     String
  summary        String?
  classification AudioClassification
  sentiment      AudioSentiment
  severity       AudioSeverity
  resolved       Boolean
  audioEntity    AudioEntities?
  evidence       AudioEvidence[] 
  
}

model MemoryFact {
  id             String       @id @default(cuid())
  conversationId String
  key            String
  value          String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, key])
}


model Policy {
  id          String   @id @default(cuid())
  documentId  String   @unique           // e.g. "CC-PROF-2025"
  version     String                     // e.g. "1.0"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sections    PolicySection[]
}

model PolicySection {
  id          String   @id @default(cuid())
  policyId    String
  sectionId   String                     // dotted id, e.g. "3.2"
  parentId    String?                    // dotted parent id, e.g. "3" or null
  level       Int
  title       String
  exactText   String                     // VERBATIM text for this section
  sha256      String                     // checksum of exactText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  policy      Policy   @relation(fields: [policyId], references: [id])

  @@unique([policyId, sectionId])       // one row per (policy, section)
  @@index([policyId, parentId])
  @@index([policyId, level, sectionId])
}




model Call {
  id               String   @id @default(cuid())
  callId           String   @unique
  startedAt        DateTime
  endedAt          DateTime?
  durationSec      Int?
  agentId          String?
  customerId       String?

  // Storage
  transcriptText   String?
  transcriptUri    String?
  transcriptSha256 String?
  language         String?

  // NLP
  summary          String?
  classification   String?     // "complaint" | "compliment" | "other"
  sentiment        String?     // "negative" | "neutral" | "positive"
  severity         String?     // "low" | "medium" | "high"

  // ↓ These were arrays/objects — use Json in SQLite
  intentsJson      Json?       // e.g. ["billing_inquiry","refund_request"]
  entities         Json?       // { account_id, ... }
  evidence         Json?       // [{ speaker, text, start_ms, end_ms }]
  classifierConf   Float?

  policyAudit      Json?       // overall + findings

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([startedAt])
  @@index([agentId])
  @@index([customerId])
  @@index([classification, severity])
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String   // e.g. "policies", "hr", "sales"
  subsection  String?  // e.g. "company-policies", "onboarding"
  fileName    String
  filePath    String   // Path to the uploaded file
  fileSize    Int      // File size in bytes
  mimeType    String   // e.g. "application/pdf"
  uploadedBy  String?  // User ID who uploaded
  headers     Json?    // Document headers/metadata
  isProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category, subsection])
  @@index([uploadedBy])
  @@index([isProcessed])
}

enum PolicyDocumentType {
  CODE_OF_CONDUCT
  DATA_PRIVACY_POLICY
  IT_SECURITY_POLICY
  REMOTE_WORK_POLICY
  ONBOARDING
  PERFORMANCE
  LEAVE
  EMPLOYEE_HANDBOOK
}

enum PolicyDocumentParentId{
  POLICY
  HR
  SALES 
  MARKETING 
  ENGINEERING 
  PRODUCT 
  OPS 
  FINANCE
  LEGAL
  OTHER
}

model PolicyDocument {
  id          String              @id @default(cuid())
  title       String
  description String?
  type        PolicyDocumentType
  parentId    PolicyDocumentParentId
  fileName    String
  filePath    String              // Path to the uploaded file
  fileSize    Int                 // File size in bytes
  mimeType    String              // e.g. "application/pdf"
  uploadedBy  String?             // User ID who uploaded
  headers     Json?               // Document headers/metadata
  isProcessed Boolean             @default(false)
  version     String?             // Document version
  effectiveDate DateTime?         // When the policy becomes effective
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@index([type])
  @@index([uploadedBy])
  @@index([isProcessed])
  @@index([effectiveDate])
}

